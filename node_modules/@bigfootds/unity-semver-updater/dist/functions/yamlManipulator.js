"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProjectSettingsHelpers = void 0;
const promises_1 = __importDefault(require("fs/promises"));
const constants_1 = require("../utils/constants");
const UnityProjectVersion_1 = require("../utils/UnityProjectVersion");
async function readTargetFile(targetFilePath) {
    let fileAsItWasRead = await promises_1.default.readFile(targetFilePath, { encoding: 'utf8' });
    return fileAsItWasRead;
}
class ProjectSettingsHelpers {
    /**
     * Parse a targeted `ProjectSettings.asset` file and retrieve its stored `bundleVersion` property.
     *
     * This property typically is used as the "Version" of a Unity project in that project's player settings.
     * @author BigfootDS
     *
     * @export
     * @async
     * @param {string} targetFilePath An absolute file path to a `ProjectSettings.asset` file for a Unity project.
     * @returns {string} The semver value assigned to the bundleVersion property of the targeted `ProjectSettings.asset` file.
     */
    static async getExistingBundleVersion(targetFilePath) {
        let fileAsItWasRead = await readTargetFile(targetFilePath);
        let regexResult = constants_1.regexFindBundleVersionWithQuad.exec(fileAsItWasRead) || "";
        let regexResultGroups = regexResult.groups;
        return new UnityProjectVersion_1.UnityProjectVersion(Number.parseInt((regexResultGroups === null || regexResultGroups === void 0 ? void 0 : regexResultGroups.major) || "0") || 0, Number.parseInt((regexResultGroups === null || regexResultGroups === void 0 ? void 0 : regexResultGroups.minor) || "0") || 0, Number.parseInt((regexResultGroups === null || regexResultGroups === void 0 ? void 0 : regexResultGroups.patch) || "0") || 0, Number.parseInt((regexResultGroups === null || regexResultGroups === void 0 ? void 0 : regexResultGroups.quad) || "0") || 0, (regexResultGroups === null || regexResultGroups === void 0 ? void 0 : regexResultGroups.releaseLabel) || "", (regexResultGroups === null || regexResultGroups === void 0 ? void 0 : regexResultGroups.buildLabel) || "", regexResult[0].toString());
    }
    /**
     * Write a collection of version strings to the ProjectSettings asset file.
     * @author BigfootDS
     *
     * @export
     * @async
     * @param {string} targetFilePath Path to the `ProjectSettings.asset` file.
     * @param {PlayerSettingsVersionStrings} targetPropertyCollection Structured object of version strings and numbers, per whatever the supported Unity platforms need.
     * @returns {boolean} True on a smooth, successful write. False if anything went wrong.
     */
    static async writeToProjectSettings(targetFilePath, targetPropertyCollection) {
        let success = false;
        let fileAsItWasRead = await readTargetFile(targetFilePath);
        let fileModified = fileAsItWasRead;
        let targetPropEntries = Object.entries(targetPropertyCollection);
        for (let index = 0; index < targetPropEntries.length; index++) {
            const targetProp = targetPropEntries[index];
            // console.log(`Key: ${targetProp[0]}, Value: ${targetProp[1]}`);
            switch (targetProp[0]) {
                case "bundleVersion":
                    fileModified = fileModified.replace(constants_1.regexFindBundleVersionWithQuad, `${targetProp[0]}: ${targetProp[1]}`);
                    break;
                case "switchReleaseVersion":
                    fileModified = fileModified.replace(constants_1.regexFindSwitchReleaseVersionWithQuad, `${targetProp[0]}: ${targetProp[1]}`);
                    break;
                case "switchDisplayVersion":
                    fileModified = fileModified.replace(constants_1.regexFindSwitchDisplayVersionWithQuad, `${targetProp[0]}: ${targetProp[1]}`);
                    break;
                case "ps4MasterVersion":
                    fileModified = fileModified.replace(constants_1.regexFindPs4MasterVersionWithQuad, `${targetProp[0]}: ${targetProp[1]}`);
                    break;
                case "ps4AppVersion":
                    fileModified = fileModified.replace(constants_1.regexFindPs4AppVersionWithQuad, `${targetProp[0]}: ${targetProp[1]}`);
                    break;
                case "metroPackageVersion":
                    fileModified = fileModified.replace(constants_1.regexFindMetroPackageVersionWithQuad, `${targetProp[0]}: ${targetProp[1]}`);
                    break;
                case "XboxOneVersion":
                    fileModified = fileModified.replace(constants_1.regexFindXboxOneVersionWithQuad, `${targetProp[0]}: ${targetProp[1]}`);
                    break;
                case "psp2MasterVersion":
                    fileModified = fileModified.replace(constants_1.regexFindPsp2MasterVersionWithQuad, `${targetProp[0]}: ${targetProp[1]}`);
                    break;
                case "psp2AppVersion":
                    fileModified = fileModified.replace(constants_1.regexFindPsp2AppVersionWithQuad, `${targetProp[0]}: ${targetProp[1]}`);
                    break;
                default:
                    break;
            }
        }
        let result = await promises_1.default.writeFile(targetFilePath, fileModified);
        if (result === undefined) {
            success = true;
        }
        return success;
    }
}
exports.ProjectSettingsHelpers = ProjectSettingsHelpers;
